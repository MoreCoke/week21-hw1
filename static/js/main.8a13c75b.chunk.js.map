{"version":3,"sources":["TodoItem.js","TodoList.js","index.js"],"names":["TodoItem","todo","onEditTodoClick","onDeleteTodoClick","onToggleDoneTodoClick","useState","todoEditInputValue","setTodoEditInputValue","className","data-id","id","onClick","type","defaultChecked","isDone","htmlFor","isEdit","name","value","onChange","e","target","TodoList","todoList","setTodoList","todoAddInputValue","setTodoAddInputValue","todoType","setTodoType","useEffect","console","log","map","onAddTodoClick","Date","getTime","prevTodoList","editValue","newTodoList","element","filter","filterTodoList","useMemo","Error","onKeyPress","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAQe,SAASA,EAAT,GAKX,IAJFC,EAIC,EAJDA,KACAC,EAGC,EAHDA,gBACAC,EAEC,EAFDA,kBACAC,EACC,EADDA,sBACC,EAEmDC,mBAASJ,EAAKA,MAFjE,mBAEMK,EAFN,KAE0BC,EAF1B,KAQD,OACE,oBAAIC,UAAU,kBAAkBC,UAASR,EAAKS,GAA9C,SACE,sBAAKF,UAAU,sDAAf,UACE,sBAAKA,UAAU,8BAAf,UACE,sBAAKG,QAAS,kBAAMP,EAAsBH,EAAKS,KAA/C,UACE,uBACEE,KAAK,WACLJ,UAAU,iBACVE,GAAIT,EAAKS,GACTG,eAAgBZ,EAAKa,SAEvB,uBAAON,UAAWP,EAAKa,OAAS,OAAS,GAAIC,QAASd,EAAKS,GAA3D,SACGT,EAAKA,UAGTA,EAAKe,QACJ,uBACEJ,KAAK,OACLJ,UAAU,kBACVS,KAAK,OACLC,MAAOZ,EACPa,SAzBa,SAACC,GACxBb,EAAsBa,EAAEC,OAAOH,aA4B3B,gCACE,wBACEV,UAAU,uBACVI,KAAK,SACLD,QAAS,kBAAMT,EAAgBD,EAAKS,GAAIJ,IAH1C,SAKGL,EAAKe,OAAS,2BAAS,iBAE1B,wBACER,UAAU,sBACVI,KAAK,SACLD,QAAS,kBAAMR,EAAkBF,EAAKS,KAHxC,kCCyGKY,MAxJf,WAAqB,IAAD,EACcjB,mBAAS,IADvB,mBACXkB,EADW,KACDC,EADC,OAEgCnB,mBAAS,IAFzC,mBAEXoB,EAFW,KAEQC,EAFR,OAGcrB,mBAAS,OAHvB,mBAGXsB,EAHW,KAGDC,EAHC,KAUlBC,qBAAU,WACRC,QAAQC,IACN,WACAR,EAASS,KAAI,SAACZ,GAAD,OAAOA,EAAEN,aAEvB,CAACS,IAEJ,IAAMU,EAAiB,WACrB,GAAKR,EAAL,CACA,IAAMxB,EAAO,CACXS,IAAI,IAAIwB,MAAOC,UACflC,KAAMwB,EACNX,QAAQ,EACRE,QAAQ,GAEVQ,GAAY,SAACY,GAAD,OAAmBnC,GAAnB,mBAA4BmC,OACxCV,EAAqB,MASjBxB,EAAkB,SAACQ,EAAI2B,GAC3B,IAAMC,EAAcf,EAASS,KAAI,SAACO,GAChC,OAAIA,EAAQ7B,KAAOA,EACV,2BAAK6B,GAAZ,IAAqBvB,QAASuB,EAAQvB,OAAQf,KAAMoC,IAE/CE,KAETf,EAAYc,IAGRnC,EAAoB,SAACO,GACzB,IAAM4B,EAAcf,EAASiB,QAAO,SAACD,GAAD,OAAaA,EAAQ7B,KAAOA,KAChEc,EAAYc,IAGRlC,EAAwB,SAACM,GAC7B,IAAM4B,EAAcf,EAASS,KAAI,SAACO,GAChC,OAAIA,EAAQ7B,KAAOA,EACV,2BAAK6B,GAAZ,IAAqBzB,QAASyB,EAAQzB,SAEjCyB,KAETf,EAAYc,IAGRG,EAAiBC,mBAAQ,WAC7B,OAAQf,GACN,IAAK,MACH,OAAOJ,EACT,IAAK,OACH,OAAOA,EAASiB,QAAO,SAACD,GAAD,OAAaA,EAAQzB,UAC9C,IAAK,SACH,OAAOS,EAASiB,QAAO,SAACD,GAAD,OAAcA,EAAQzB,UAG/C,QACE,MAAM,IAAI6B,MAAM,mCAEnB,CAACpB,EAAUI,IAMd,OACE,sBAAKnB,UAAU,qBAAf,UACE,qBAAKA,UAAU,eAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,qBAAKA,UAAU,sCAAf,SACE,uBACEI,KAAK,OACLJ,UAAU,eACVS,KAAK,MACLE,SAbkB,SAACC,GAC7BM,EAAqBN,EAAEC,OAAOH,QAapB0B,WA5Dc,SAACxB,GACX,UAAVA,EAAEyB,KACJZ,KA2DQf,MAAOO,MAGX,qBAAKjB,UAAU,0BAAf,SACE,wBACEA,UAAU,kBACVI,KAAK,SACLD,QAASsB,EAHX,iCAUN,sBAAKzB,UAAU,+CAAf,UACE,wBACEA,UAAU,kBACVI,KAAK,SACLD,QAAS,kBAAMiB,EAAY,QAH7B,sCAOA,wBACEpB,UAAU,kBACVI,KAAK,SACLD,QAAS,kBAAMiB,EAAY,SAH7B,gCAOA,wBACEpB,UAAU,eACVI,KAAK,SACLD,QAAS,kBAAMiB,EAAY,WAH7B,gCAOA,wBACEpB,UAAU,iBACVI,KAAK,SACLD,QAAS,WAEPa,EAAY,KALhB,yCAWF,oBAAIhB,UAAU,wCAAd,SACGiC,EAAeT,KAAI,SAACO,GAAD,OAClB,cAACvC,EAAD,CACEC,KAAMsC,EAENrC,gBAAiBA,EACjBC,kBAAmBA,EACnBC,sBAAuBA,GAHlBmC,EAAQ7B,aC9IzBoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8a13c75b.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable jsx-a11y/label-has-for */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable react/jsx-one-expression-per-line */\r\n\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function TodoItem({\r\n  todo,\r\n  onEditTodoClick,\r\n  onDeleteTodoClick,\r\n  onToggleDoneTodoClick,\r\n}) {\r\n  // 我記得用 prop 當作 component 中 state 並不是好的設計方式，但又不知道除此之外能怎麼做比較好\r\n  const [todoEditInputValue, setTodoEditInputValue] = useState(todo.todo);\r\n\r\n  const onEditTodoChange = (e) => {\r\n    setTodoEditInputValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <li className=\"list-group-item\" data-id={todo.id}>\r\n      <div className=\"d-flex justify-content-between align-items-baseline\">\r\n        <div className=\"d-flex align-items-baseline\">\r\n          <div onClick={() => onToggleDoneTodoClick(todo.id)}>\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"mr-2 todo-mark\"\r\n              id={todo.id}\r\n              defaultChecked={todo.isDone}\r\n            />\r\n            <label className={todo.isDone ? 'done' : ''} htmlFor={todo.id}>\r\n              {todo.todo}\r\n            </label>\r\n          </div>\r\n          {todo.isEdit && (\r\n            <input\r\n              type=\"text\"\r\n              className=\"ml-2 form-group\"\r\n              name=\"edit\"\r\n              value={todoEditInputValue}\r\n              onChange={onEditTodoChange}\r\n            />\r\n          )}\r\n        </div>\r\n        <div>\r\n          <button\r\n            className=\"btn btn-warning mr-3\"\r\n            type=\"button\"\r\n            onClick={() => onEditTodoClick(todo.id, todoEditInputValue)}\r\n          >\r\n            {todo.isEdit ? '完成編輯' : '編輯'}\r\n          </button>\r\n          <button\r\n            className=\"btn btn-danger mr-3\"\r\n            type=\"button\"\r\n            onClick={() => onDeleteTodoClick(todo.id)}\r\n          >\r\n            刪除\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    todo: PropTypes.string.isRequired,\r\n    isDone: PropTypes.bool.isRequired,\r\n    isEdit: PropTypes.bool.isRequired,\r\n  }),\r\n  onEditTodoClick: PropTypes.func,\r\n  onDeleteTodoClick: PropTypes.func,\r\n  onToggleDoneTodoClick: PropTypes.func,\r\n};\r\n","/* eslint-disable arrow-parens */\r\n/* eslint-disable react/jsx-one-expression-per-line */\r\n\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\n\r\nimport TodoItem from './TodoItem';\r\n\r\nfunction TodoList() {\r\n  const [todoList, setTodoList] = useState([]);\r\n  const [todoAddInputValue, setTodoAddInputValue] = useState('');\r\n  const [todoType, setTodoType] = useState('all');\r\n\r\n  // useEffect(() => {\r\n  //   console.log('todoAddInputValue', todoAddInputValue);\r\n  //   console.log('todoList', todoList);\r\n  // }, [todoAddInputValue, todoList]);\r\n\r\n  useEffect(() => {\r\n    console.log(\r\n      'todoList',\r\n      todoList.map((e) => e.isDone)\r\n    );\r\n  }, [todoList]);\r\n\r\n  const onAddTodoClick = () => {\r\n    if (!todoAddInputValue) return;\r\n    const todo = {\r\n      id: new Date().getTime(),\r\n      todo: todoAddInputValue,\r\n      isDone: false,\r\n      isEdit: false,\r\n    };\r\n    setTodoList((prevTodoList) => [todo, ...prevTodoList]);\r\n    setTodoAddInputValue('');\r\n  };\r\n\r\n  const onAddTodoKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      onAddTodoClick();\r\n    }\r\n  };\r\n\r\n  const onEditTodoClick = (id, editValue) => {\r\n    const newTodoList = todoList.map((element) => {\r\n      if (element.id === id) {\r\n        return { ...element, isEdit: !element.isEdit, todo: editValue };\r\n      }\r\n      return element;\r\n    });\r\n    setTodoList(newTodoList);\r\n  };\r\n\r\n  const onDeleteTodoClick = (id) => {\r\n    const newTodoList = todoList.filter((element) => element.id !== id);\r\n    setTodoList(newTodoList);\r\n  };\r\n\r\n  const onToggleDoneTodoClick = (id) => {\r\n    const newTodoList = todoList.map((element) => {\r\n      if (element.id === id) {\r\n        return { ...element, isDone: !element.isDone };\r\n      }\r\n      return element;\r\n    });\r\n    setTodoList(newTodoList);\r\n  };\r\n\r\n  const filterTodoList = useMemo(() => {\r\n    switch (todoType) {\r\n      case 'all':\r\n        return todoList;\r\n      case 'done':\r\n        return todoList.filter((element) => element.isDone);\r\n      case 'undone':\r\n        return todoList.filter((element) => !element.isDone);\r\n      // case 'deleteAll':\r\n      //   return [];\r\n      default:\r\n        throw new Error(\"can't find todo filter type!\");\r\n    }\r\n  }, [todoList, todoType]);\r\n\r\n  const onAddInputValueChange = (e) => {\r\n    setTodoAddInputValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"TodoList container\">\r\n      <div className=\"p-4 todo-add\">\r\n        <div className=\"form-group row\">\r\n          <div className=\"col-sm-10 d-flex align-items-center\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"add\"\r\n              onChange={onAddInputValueChange}\r\n              onKeyPress={onAddTodoKeyPress}\r\n              value={todoAddInputValue}\r\n            />\r\n          </div>\r\n          <div className=\"col-sm-2 col-form-label\">\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              type=\"button\"\r\n              onClick={onAddTodoClick}\r\n            >\r\n              新增\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"d-flex justify-content-around mb-3 todo-btns\">\r\n        <button\r\n          className=\"btn btn-primary\"\r\n          type=\"button\"\r\n          onClick={() => setTodoType('all')}\r\n        >\r\n          全部任務\r\n        </button>\r\n        <button\r\n          className=\"btn btn-success\"\r\n          type=\"button\"\r\n          onClick={() => setTodoType('done')}\r\n        >\r\n          已完成\r\n        </button>\r\n        <button\r\n          className=\"btn btn-info\"\r\n          type=\"button\"\r\n          onClick={() => setTodoType('undone')}\r\n        >\r\n          未完成\r\n        </button>\r\n        <button\r\n          className=\"btn btn-danger\"\r\n          type=\"button\"\r\n          onClick={() => {\r\n            // setTodoType('deleteAll'); // 會有奇怪的 bug,當刪除全部後再新增 todo 時不會被 render 出來，還要再點選任意 todoType 按鈕才會 render\r\n            setTodoList([]);\r\n          }}\r\n        >\r\n          刪除全部\r\n        </button>\r\n      </div>\r\n      <ul className=\"list-group list-group-flush todo-list\">\r\n        {filterTodoList.map((element) => (\r\n          <TodoItem\r\n            todo={element}\r\n            key={element.id}\r\n            onEditTodoClick={onEditTodoClick}\r\n            onDeleteTodoClick={onDeleteTodoClick}\r\n            onToggleDoneTodoClick={onToggleDoneTodoClick}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport TodoList from './TodoList';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <TodoList />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}